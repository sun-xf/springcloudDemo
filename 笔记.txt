此笔记摘抄自https://www.cnblogs.com/sam-uncle/p/8954401.html，“JAVA开发老菜鸟”博客。
第一篇：使用 Eureka 进行服务治理
通过spring-cloud-starter-eureka-server和@EnableEurekaServer实现服务注册中心。
通过spring-cloud-starter-eureka和@EnableDiscoveryClient使用并注册到服务注册中心。
通过spring-cloud-starter-eureka和@EnableDiscoveryClient使用注册中心并发现服务，
通过spring-cloud-starter-ribbon来实现负载均衡消费服务。

第二篇：使用 Eureka 搭建高可用服务注册中心
在实际的应用中，分布式系统为了防止单体服务宕机带来严重后果，一般都会采用服务器集群的形式，服务注册中心也是一样，需要多台服务一起工作，组成高可用的服务注册中心。
这样，如果有其中一台宕机，系统也能正常运行。那么如何来构建高可用的服务注册中心呢？
由于eureka注册中心既可以作为服务端（服务注册中心），也可以作为客户端（到别的注册中心注册自己），
我们可以通过在机器上部署peer1和peer2两个服务，两个服务相互注册。
如果没有安装springboot插件，启动peer1服务时，需要在Debug Configurations-->Java Application中，新建一个eureka1,在Arguments
的VM arguments中设置-Dspring.profiles.active=peer1，peer2同理。

第三篇：使用Hystrix 实现断路器进行服务容错保护
在微服务中，我们将系统拆分为很多个服务单元，各单元之间通过服务注册和订阅消费的方式进行相互依赖。但是如果有一些服务出现问题了会怎么样？
比如说有三个服务（ABC），A调用B，B调用C。由于网络延迟或C本身代码有问题导致B迟迟得不到回应，这样B调用C的请求就会被挂起，等待。
在高并发的访问的情况下，这些挂起的线程得不到释放，使后续的请求阻塞，最终导致B也挂掉了。依次类推，A可能也会挂掉，进而使整个系统全部崩溃。
为了解决整个问题，Spring Cloud 使用Hystrix进行服务容错保护，包括断路器、线程隔离等一系列的保护功能。

第四篇：使用Feign 实现声明式服务调用
通过前面的示例，我们了解如何通过Spring Cloud ribbon进行负责均衡，如何通过Spring Cloud Hystrix进行服务断路保护，
两者作为基础工具类框架应用在各种基础设施类微服务和业务类微服务中，并且成对存在，那么有没有更高层的封装，将两者的使用
进一步简化呢？ 有！ 他就是Spring Cloud Feign。它基于Netflix Feign实现，整合了Spring Cloud Ribbon和Spring Cloud Hystrix，
除了提供两者强大的功能外，还提供了一种声明式的Web服务客户端定义方式。

第五篇：使用Zuul 实现API网关服务
当外部系统调用我们的RESTful API的时候，怎么确定它需要的功能具体是哪个服务提供的呢？这个就涉及到一个路由规则和服务实例列表的维护问题。
它可以解决两个大问题：
1、就是我们上面提到的路由规则和服务实例的维护问题
2、对于一些校验（比如登录校验等）冗余问题。 按照我们的习惯的做法，是在每个服务中都需要加入这些校验，但是这样会导致代码冗余并且维护也比较麻烦，
有了Spring Cloud Zuul这个网关服务之后，我们可以将这些共通的校验放到网关里面统一维护。
